{"version":3,"sources":["assets/img/funny-cat.png","hooks/Hooks.js","services/AuthContext.js","pages/authentication/Login.js","pages/authentication/Register.js","pages/Home.js","pages/Subscriptions.js","pages/Notifications.js","pages/Settings.js","pages/Error.js","services/PrivateRoute.js","services/PublicRoute.js","App.js","index.js"],"names":["module","exports","API_URL","async","getUserData","authToken","Cookies","get","response","fetch","method","headers","ok","Error","status","json","error","unsubscribe","userId","encodeURIComponent","body","JSON","stringify","data","text","parse","AuthContext","createContext","isLoading","isAuthenticated","Login","navigate","useNavigate","setIsAuthenticated","useContext","errorMessage","setErrorMessage","useState","React","createElement","className","onSubmit","event","preventDefault","email","target","value","password","token","login","set","style","textAlign","marginBottom","fontSize","type","name","placeholder","required","onClick","alert","Register","successMessage","setSuccessMessage","username","register","setTimeout","handleMicrosoftRegister","PostCard","_ref4","post","comments","subscriptions","refreshPosts","toggleSubscription","onEditPost","newComment","setNewComment","showDeleteConfirm","setShowDeleteConfirm","isAuthorCurrentUser","authorId","isSubscribed","some","sub","id","author","Date","createdAt","toLocaleString","handleSubscribeToggle","mediaId","src","alt","title","content","length","map","comment","index","key","onChange","e","trim","postId","console","log","addComment","deletePost","PostModal","_ref5","closeModal","isEditing","initialPost","setTitle","setContent","image","setImage","postPayload","updatePost","createPost","rows","accept","files","Home","document","setUsername","setUserId","setSubscriptions","subscribers","setSubscribers","posts","setPosts","commentsByPost","setCommentsByPost","isModalOpen","setIsModalOpen","setIsEditing","postToEdit","setPostToEdit","setIsLoading","useEffect","localStorage","setItem","subscriptionsArray","Object","entries","_ref","subscribersArray","_ref2","fetchUserData","fetchPosts","keyword","arguments","undefined","getPosts","commentsPromises","getComments","commentsMap","Promise","all","reduce","acc","_ref3","handleOpenModalForEdit","isCurrentlySubscribed","prevSubscriptions","filter","subscribe","prevPosts","Link","to","state","handleOpenModalForCreate","handleLogout","remove","removeItem","Subscriptions","getInitial","charAt","toUpperCase","userData","fetchedSubscriptions","fetchedSubscribers","fetchData","Fragment","handleUnsubscribe","Notifications","notifications","setNotifications","getItem","notificationsWithFormattedDates","getNotifications","notification","fetchNotifications","message","Settings","isPrivate","setIsPrivate","setEmail","private","handlePrivacyToggle","setUserPrivacy","catImage","PrivateRoute","element","Component","Navigate","replace","PublicRoute","App","Provider","BrowserRouter","Routes","Route","path","exact","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.986ff789.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/funny-cat.cc5a94d5.png\";","import Cookies from 'js-cookie';\r\nimport data from \"bootstrap/js/src/dom/data\";\r\n\r\nconst API_URL = \"https://metamesh-spring-app-metamesh-api.azuremicroservices.io/api\";\r\n\r\nif (!API_URL) {\r\n    console.error(\"REACT_APP_API_URL is not defined\");\r\n}\r\n\r\nexport { API_URL };\r\n\r\nexport async function login(data) {\r\n    const response = await fetch(`${API_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`HTTP error! Expected status 200, but received: ${response.status}`);\r\n    }\r\n\r\n    return await response.text();\r\n}\r\n\r\nexport async function register(data) {\r\n    const response = await fetch(`${API_URL}/auth/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    });\r\n\r\n    if (response.status !== 201) {\r\n        throw new Error(`HTTP error! Expected status 201, but received: ${response.status}`);\r\n    }\r\n\r\n    const text = await response.text();\r\n    return text ? JSON.parse(text) : {};\r\n}\r\n\r\nexport async function getUserData() {\r\n    const authToken = Cookies.get('authToken');\r\n\r\n    if (!authToken) {\r\n        return {};\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`${API_URL}/user`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${authToken}`\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function getPosts(keyword = '') {\r\n    const authToken = Cookies.get('authToken');\r\n\r\n    if (!authToken) {\r\n        return {};\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`${API_URL}/search/posts?keyword=${encodeURIComponent(keyword)}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${authToken}`\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function getComments(postId) {\r\n    const authToken = Cookies.get('authToken');\r\n\r\n    if (!authToken) {\r\n        return {};\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`${API_URL}/posts/${encodeURIComponent(postId)}/comments`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${authToken}`\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(\"Error fetching comments:\", error);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function subscribe(userId) {\r\n    const authToken = Cookies.get('authToken');\r\n\r\n    if (!authToken) {\r\n        return {};\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/users/${encodeURIComponent(userId)}/subscribe`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${authToken}`\r\n        },\r\n        body: JSON.stringify(data)\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const text = await response.text();\r\n    return text ? JSON.parse(text) : {};\r\n}\r\n\r\nexport async function unsubscribe(userId) {\r\n    const authToken = Cookies.get('authToken');\r\n\r\n    if (!authToken) {\r\n        return {};\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/users/${encodeURIComponent(userId)}/unsubscribe`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${authToken}`\r\n        },\r\n        body: JSON.stringify(data)\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const text = await response.text();\r\n    return text ? JSON.parse(text) : {};\r\n}\r\n\r\nexport async function deletePost(postId) {\r\n    const authToken = Cookies.get('authToken');\r\n\r\n    if (!authToken) {\r\n        return {};\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/posts/${encodeURIComponent(postId)}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${authToken}`\r\n        },\r\n        body: JSON.stringify(data)\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const text = await response.text();\r\n    return text ? JSON.parse(text) : {};\r\n}\r\n\r\nexport async function createPost(data) {\r\n    const authToken = Cookies.get('authToken');\r\n\r\n    if (!authToken) {\r\n        console.error(\"No auth token found\");\r\n        return {};\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/posts`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${authToken}`,\r\n        },\r\n        body: JSON.stringify(data),\r\n    });\r\n\r\n    console.log(\"API Response status:\", response.status);\r\n    if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const text = await response.text();\r\n    return text ? JSON.parse(text) : {};\r\n}\r\n\r\nexport async function updatePost(postId, data) {\r\n    const authToken = Cookies.get('authToken');\r\n\r\n    if (!authToken) {\r\n        console.error(\"No auth token found\");\r\n        return {};\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/posts/${encodeURIComponent(postId)}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${authToken}`,\r\n        },\r\n        body: JSON.stringify(data),\r\n    });\r\n\r\n    console.log(\"API Response status:\", response.status);\r\n    if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const text = await response.text();\r\n    return text ? JSON.parse(text) : {};\r\n}\r\n\r\nexport async function addComment(postId, content) {\r\n    const authToken = Cookies.get('authToken');\r\n\r\n    if (!authToken) {\r\n        console.error(\"No auth token found\");\r\n        return {};\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/posts/${encodeURIComponent(postId)}/comments`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${authToken}`,\r\n        },\r\n        body: JSON.stringify(content),\r\n    });\r\n\r\n    console.log(\"API Response status:\", response.status);\r\n    if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const text = await response.text();\r\n    return text ? JSON.parse(text) : {};\r\n}\r\n\r\nexport async function getPostById(postId) {\r\n    const authToken = Cookies.get('authToken');\r\n\r\n    if (!authToken) {\r\n        return {};\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`${API_URL}/posts/${encodeURIComponent(postId)}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${authToken}`\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(\"Error fetching post:\", error);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function getNotifications(userId) {\r\n    const authToken = Cookies.get('authToken');\r\n\r\n    if (!authToken) {\r\n        return {};\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`${API_URL}/users/${encodeURIComponent(userId)}/notifications`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${authToken}`\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(\"Error fetching notifications:\", error);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport async function setUserPrivacy(userId, isPrivate) {\r\n    const authToken = Cookies.get('authToken');\r\n\r\n    if (!authToken) {\r\n        return {};\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`${API_URL}/users/${encodeURIComponent(userId)}/privacy`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${authToken}`,\r\n            },\r\n            body: JSON.stringify(isPrivate),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(\"Error fetching notifications:\", error);\r\n        return {};\r\n    }\r\n}","import { createContext } from 'react';\r\n\r\nexport const AuthContext = createContext({\r\n    isLoading: false,\r\n    isAuthenticated: false,\r\n});","import React, { useState, useContext } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { login } from '../../hooks/Hooks';\r\nimport Cookies from 'js-cookie';\r\nimport { AuthContext } from \"../../services/AuthContext\";\r\nimport \"../../assets/css/login.css\";\r\n\r\nfunction Login() {\r\n    const navigate = useNavigate();\r\n    const { setIsAuthenticated } = useContext(AuthContext);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const email = event.target.email.value;\r\n        const password = event.target.password.value;\r\n\r\n        try {\r\n            const token = await login({ email, password });\r\n            Cookies.set('authToken', token);\r\n            setIsAuthenticated(true);\r\n            navigate('/');\r\n        } catch (error) {\r\n            setErrorMessage('Incorrect credentials');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"animation-left\"></div>\r\n            <div className=\"animation-right\"></div>\r\n\r\n            <form className=\"form\" onSubmit={handleSubmit} style={{ textAlign: \"center\" }}>\r\n                <h2 style={{ textAlign: \"center\", marginBottom: \"1rem\", fontSize: \"2.7rem\" }}>Login</h2>\r\n                {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n                <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Email\"\r\n                    className=\"input\"\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    className=\"input\"\r\n                    required\r\n                />\r\n                <button type=\"submit\" className=\"button\">\r\n                    Login\r\n                </button>\r\n                <button\r\n                    onClick={() => alert(\"Microsoft authentication clicked!\")}\r\n                    type=\"button\"\r\n                    className=\"button ms-button\"\r\n                >\r\n                    Login with Microsoft\r\n                </button>\r\n                <button\r\n                    onClick={() => navigate(\"/register\")}\r\n                    type=\"button\"\r\n                    className=\"button nav-button\"\r\n                >\r\n                    Register\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { register } from \"../../hooks/Hooks\"; // Implémentez cette fonction pour appeler votre backend\r\nimport \"../../assets/css/register.css\";\r\n\r\nfunction Register() {\r\n    const navigate = useNavigate();\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const username = event.target.username.value;\r\n        const email = event.target.email.value;\r\n        const password = event.target.password.value;\r\n\r\n        try {\r\n            await register({ username, email, password });\r\n            setSuccessMessage(\"Registration successful! Redirecting to login...\");\r\n            setTimeout(() => navigate(\"/login\"), 3000);\r\n        } catch (error) {\r\n            setErrorMessage(\"Failed to register. Please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleMicrosoftRegister = () => {\r\n        alert(\"Microsoft registration clicked!\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"animation-left\"></div>\r\n            <div className=\"animation-right\"></div>\r\n\r\n            <form className=\"form\" onSubmit={handleSubmit} style={{ textAlign: \"center\" }}>\r\n                <h2 style={{ textAlign: \"center\", marginBottom: \"1rem\", fontSize: \"2.7rem\" }}>Register</h2>\r\n                {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n                {successMessage && <p className=\"success-message\">{successMessage}</p>}\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    placeholder=\"Username\"\r\n                    className=\"input\"\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Email\"\r\n                    className=\"input\"\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    className=\"input\"\r\n                    required\r\n                />\r\n                <button type=\"submit\" className=\"button\">\r\n                    Register\r\n                </button>\r\n                <button\r\n                    onClick={handleMicrosoftRegister}\r\n                    type=\"button\"\r\n                    className=\"button ms-button\"\r\n                >\r\n                    Register with Microsoft\r\n                </button>\r\n                <button\r\n                    onClick={() => navigate(\"/login\")}\r\n                    type=\"button\"\r\n                    className=\"button nav-button\"\r\n                >\r\n                    Back to Login\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n    getUserData,\r\n    getPosts,\r\n    getComments,\r\n    subscribe,\r\n    unsubscribe,\r\n    deletePost,\r\n    createPost,\r\n    updatePost, addComment\r\n} from \"../hooks/Hooks\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { AuthContext } from \"../services/AuthContext\";\r\nimport Cookies from \"js-cookie\";\r\nimport \"../assets/css/home.css\";\r\n\r\nfunction Home() {\r\n    document.title = \"Home - MetaMesh\";\r\n\r\n    const navigate = useNavigate();\r\n    const { setIsAuthenticated } = useContext(AuthContext);\r\n    const [username, setUsername] = useState(\"\");\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [subscriptions, setSubscriptions] = useState([]);\r\n    const [subscribers, setSubscribers] = useState([]);\r\n    const [posts, setPosts] = useState([]);\r\n    const [commentsByPost, setCommentsByPost] = useState({});\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [postToEdit, setPostToEdit] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchUserData = async () => {\r\n            try {\r\n                const data = await getUserData();\r\n\r\n                setUsername(data.username);\r\n                setUserId(data.id);\r\n                localStorage.setItem(\"userId\", data.id); // Enregistrer le userId dans le localStorage\r\n\r\n                const subscriptionsArray = Object.entries(data.subscriptions || {}).map(\r\n                    ([id, username]) => ({ id, username })\r\n                );\r\n                setSubscriptions(subscriptionsArray);\r\n\r\n                const subscribersArray = Object.entries(data.subscribers || {}).map(\r\n                    ([id, username]) => ({ id, username })\r\n                );\r\n                setSubscribers(subscribersArray);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n\r\n        fetchUserData();\r\n    }, []);\r\n\r\n\r\n    const fetchPosts = async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            const data = await getPosts(\"\");\r\n            setPosts(data);\r\n\r\n            const commentsPromises = data.map(async (post) => {\r\n                const comments = await getComments(post.id);\r\n                return { postId: post.id, comments };\r\n            });\r\n\r\n            const commentsResults = await Promise.all(commentsPromises);\r\n            const commentsMap = commentsResults.reduce((acc, { postId, comments }) => {\r\n                acc[postId] = comments;\r\n                return acc;\r\n            }, {});\r\n\r\n            setCommentsByPost(commentsMap);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch posts:\", error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        fetchPosts();\r\n    }, []);\r\n\r\n    const handleLogout = () => {\r\n        Cookies.remove(\"authToken\");\r\n        Cookies.remove(\"userData\");\r\n        localStorage.removeItem(\"userId\");\r\n        setIsAuthenticated(false);\r\n        navigate(\"/login\");\r\n    };\r\n\r\n    const handleOpenModalForEdit = (post) => {\r\n        setIsEditing(true);\r\n        setPostToEdit(post);\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const handleOpenModalForCreate = () => {\r\n        setIsEditing(false);\r\n        setPostToEdit(null);\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const toggleSubscription = async (authorId) => {\r\n        const isCurrentlySubscribed = subscriptions.some((sub) => sub.id === authorId);\r\n\r\n        try {\r\n            if (isCurrentlySubscribed) {\r\n                await unsubscribe(authorId);\r\n                setSubscriptions((prevSubscriptions) =>\r\n                    prevSubscriptions.filter((sub) => sub.id !== authorId)\r\n                );\r\n            } else {\r\n                await subscribe(authorId);\r\n                setSubscriptions((prevSubscriptions) => [\r\n                    ...prevSubscriptions,\r\n                    { id: authorId, username: `User ${authorId}` } // Remplacez `User ${authorId}` par une méthode pour obtenir le vrai username si possible\r\n                ]);\r\n            }\r\n\r\n            setPosts((prevPosts) =>\r\n                prevPosts.map((post) =>\r\n                    post.authorId === authorId\r\n                        ? { ...post, isSubscribed: !isCurrentlySubscribed }\r\n                        : post\r\n                )\r\n            );\r\n        } catch (error) {\r\n            console.error(\r\n                `Failed to ${isCurrentlySubscribed ? \"unsubscribe\" : \"subscribe\"}:`,\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <header className=\"home-header\">\r\n                <nav className=\"nav-menu\">\r\n                    <Link to=\"/\" className=\"nav-link\">\r\n                        Home\r\n                    </Link>\r\n                    <Link\r\n                        to=\"/subscriptions\"\r\n                        state={{ subscriptions, subscribers }}\r\n                        className=\"nav-link\"\r\n                    >\r\n                        Subscriptions\r\n                    </Link>\r\n                    <Link to=\"/notifications\" className=\"nav-link\">\r\n                        Notifications\r\n                    </Link>\r\n                    <Link to=\"/settings\" className=\"nav-link\">\r\n                        Settings\r\n                    </Link>\r\n                </nav>\r\n                <div className=\"header-actions\">\r\n                    <button className=\"create-post-button\" onClick={handleOpenModalForCreate}>\r\n                        Create Post\r\n                    </button>\r\n                    <button className=\"logout-button\" onClick={handleLogout}>\r\n                        Logout\r\n                    </button>\r\n                </div>\r\n            </header>\r\n            <main className=\"posts-container\">\r\n                {isLoading ? (\r\n                    <div className=\"loader\">\r\n                        <p>Loading posts...</p>\r\n                    </div>\r\n                ) : posts.length > 0 ? (\r\n                    posts.map((post) => (\r\n                        <PostCard\r\n                            key={post.id}\r\n                            post={post}\r\n                            comments={commentsByPost[post.id] || []}\r\n                            subscriptions={subscriptions}\r\n                            userId={userId}\r\n                            toggleSubscription={toggleSubscription}\r\n                            refreshPosts={fetchPosts}\r\n                            onEditPost={handleOpenModalForEdit}\r\n                        />\r\n                    ))\r\n                ) : (\r\n                    <p>No posts available.</p>\r\n                )}\r\n            </main>\r\n\r\n            <footer className=\"connected-info\">Connected as {username}</footer>\r\n\r\n            {isModalOpen && (\r\n                <PostModal\r\n                    closeModal={() => {\r\n                        setIsModalOpen(false);\r\n                        setPostToEdit(null);\r\n                    }}\r\n                    refreshPosts={fetchPosts}\r\n                    isEditing={isEditing}\r\n                    initialPost={postToEdit}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction PostCard({ post, comments, subscriptions, userId, refreshPosts, toggleSubscription, onEditPost }) {\r\n    const [newComment, setNewComment] = useState(\"\"); // État pour le commentaire à envoyer\r\n    const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\r\n\r\n    const handleSubscribeToggle = () => {\r\n        toggleSubscription(post.authorId);\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        try {\r\n            await deletePost(post.id);\r\n            refreshPosts();\r\n        } catch (error) {\r\n            console.error(\"Failed to delete post:\", error);\r\n        } finally {\r\n            setShowDeleteConfirm(false);\r\n        }\r\n    };\r\n\r\n    const handleSendComment = async () => {\r\n        if (!newComment.trim()) return;\r\n        try {\r\n            await addComment(post.id, newComment);\r\n            setNewComment(\"\");\r\n            refreshPosts();\r\n        } catch (error) {\r\n            console.error(\"Failed to send comment:\", error);\r\n            alert(\"An error occurred while sending the comment.\");\r\n        }\r\n    };\r\n\r\n    const isAuthorCurrentUser = post.authorId === userId;\r\n    const isSubscribed = subscriptions.some((sub) => sub.id === post.authorId);\r\n\r\n    return (\r\n        <div className=\"post-card\">\r\n            <div className=\"post-header\">\r\n                <span className=\"post-author\">{post.author}</span>\r\n                <span className=\"post-created-at\">\r\n                    {new Date(post.createdAt).toLocaleString()}\r\n                </span>\r\n                {isAuthorCurrentUser ? (\r\n                    <div className=\"post-actions\">\r\n                        <button className=\"update-button\" onClick={() => onEditPost(post)}>\r\n                            Update\r\n                        </button>\r\n                        <button\r\n                            className=\"delete-button\"\r\n                            onClick={() => setShowDeleteConfirm(true)}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    </div>\r\n                ) : (\r\n                    <button\r\n                        className=\"subscribe-button\"\r\n                        onClick={handleSubscribeToggle}\r\n                    >\r\n                        {isSubscribed ? \"Unsubscribe\" : \"Subscribe\"}\r\n                    </button>\r\n                )}\r\n            </div>\r\n            {post.mediaId && (\r\n                <img\r\n                    src={`https://d1jyxxz9imt9yb.cloudfront.net/medialib/3615/image/s768x1300/MC_20180821_FRA_BeautyShots_030_334609_reduced.jpg`}\r\n                    //src={`https://your-media-service.com/${post.mediaId}`}\r\n                    alt=\"Post\"\r\n                    className=\"post-image\"\r\n                />\r\n            )}\r\n            <div className=\"post-content\">\r\n                <h4>{post.title}</h4>\r\n                <p>{post.content}</p>\r\n            </div>\r\n            <hr className=\"content-divider\" />\r\n            <div className=\"post-comments\">\r\n                <h4>Comments:</h4>\r\n                <ul>\r\n                    {comments.length > 0 ? (\r\n                        comments.map((comment, index) => (\r\n                            <li key={index}>\r\n                                <strong>{comment.username}</strong> (\r\n                                {new Date(comment.createdAt).toLocaleString()}):{\" \"}\r\n                                {comment.content}\r\n                            </li>\r\n                        ))\r\n                    ) : (\r\n                        <p>No comments yet.</p>\r\n                    )}\r\n                </ul>\r\n                <div className=\"add-comment\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Write a comment...\"\r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        className=\"comment-input\"\r\n                    />\r\n                    <button onClick={handleSendComment} className=\"send-comment-button\">\r\n                        Send\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Modal de confirmation */}\r\n            {showDeleteConfirm && (\r\n                <div className=\"modal-overlay\">\r\n                    <div className=\"modal-content\">\r\n                        <h3>Are you sure you want to delete this post?</h3>\r\n                        <div className=\"modal-actions\">\r\n                            <button\r\n                                className=\"button confirm-button\"\r\n                                onClick={handleDelete}\r\n                            >\r\n                                Confirm\r\n                            </button>\r\n                            <button\r\n                                className=\"button cancel-button\"\r\n                                onClick={() => setShowDeleteConfirm(false)}\r\n                            >\r\n                                Cancel\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction PostModal({ closeModal, refreshPosts, isEditing, initialPost }) {\r\n    const [title, setTitle] = useState(initialPost?.title || \"\");\r\n    const [content, setContent] = useState(initialPost?.content || \"\");\r\n    const [image, setImage] = useState(null);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!title || !content) {\r\n            alert(\"Title and content are required!\");\r\n            return;\r\n        }\r\n\r\n        const postPayload = {\r\n            title,\r\n            content,\r\n            mediaId: image ? image.name : initialPost?.mediaId || null,\r\n        };\r\n\r\n        try {\r\n            if (isEditing) {\r\n                await updatePost(initialPost.id, postPayload);\r\n            } else {\r\n                await createPost(postPayload);\r\n            }\r\n\r\n            refreshPosts();\r\n            closeModal();\r\n        } catch (error) {\r\n            console.error(\"Failed to submit post:\", error);\r\n            alert(\"An error occurred while processing the post. Please try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal-overlay\">\r\n            <div className=\"modal-content\">\r\n                <h2>{isEditing ? \"Update Post\" : \"Create Post\"}</h2>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Title\"\r\n                        value={title}\r\n                        onChange={(e) => setTitle(e.target.value)}\r\n                        required\r\n                    />\r\n                    <textarea\r\n                        placeholder=\"Content\"\r\n                        value={content}\r\n                        onChange={(e) => setContent(e.target.value)}\r\n                        rows=\"4\"\r\n                        required\r\n                    />\r\n                    <input\r\n                        type=\"file\"\r\n                        accept=\"image/*\"\r\n                        onChange={(e) => setImage(e.target.files[0])}\r\n                    />\r\n                    <div className=\"modal-actions\">\r\n                        <button type=\"submit\" className=\"button\">\r\n                            Submit\r\n                        </button>\r\n                        <button type=\"button\" className=\"button cancel-button\" onClick={closeModal}>\r\n                            Cancel\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport \"../assets/css/subscriptions.css\";\r\nimport { AuthContext } from \"../services/AuthContext\";\r\nimport Cookies from \"js-cookie\";\r\nimport { unsubscribe, getUserData } from \"../hooks/Hooks\"; // Assurez-vous d'avoir une méthode pour récupérer les données utilisateur\r\n\r\nfunction Subscriptions() {\r\n    document.title = \"Subscriptions - MetaMesh\";\r\n\r\n    const navigate = useNavigate();\r\n    const { setIsAuthenticated } = useContext(AuthContext);\r\n\r\n    // États pour les données et le statut de chargement\r\n    const [subscriptions, setSubscriptions] = useState([]);\r\n    const [subscribers, setSubscribers] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const handleLogout = () => {\r\n        Cookies.remove(\"authToken\");\r\n        Cookies.remove(\"userData\");\r\n        localStorage.removeItem(\"userId\");\r\n        setIsAuthenticated(false);\r\n        navigate(\"/login\");\r\n    };\r\n\r\n    const handleUnsubscribe = async (id) => {\r\n        try {\r\n            await unsubscribe(id);\r\n            setSubscriptions((prevSubscriptions) =>\r\n                prevSubscriptions.filter((sub) => sub.id !== id)\r\n            );\r\n        } catch (error) {\r\n            console.error(\"Failed to unsubscribe:\", error);\r\n            alert(\"An error occurred while unsubscribing. Please try again.\");\r\n        }\r\n    };\r\n\r\n    const getInitial = (name) => {\r\n        if (!name) return \"?\";\r\n        return name.charAt(0).toUpperCase();\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setIsLoading(true);\r\n            try {\r\n                const userData = await getUserData(); // Appeler une méthode pour obtenir les données utilisateur\r\n\r\n                const fetchedSubscriptions = Object.entries(userData.subscriptions || {}).map(\r\n                    ([id, username]) => ({ id, username })\r\n                );\r\n\r\n                const fetchedSubscribers = Object.entries(userData.subscribers || {}).map(\r\n                    ([id, username]) => ({ id, username })\r\n                );\r\n\r\n                setSubscriptions(fetchedSubscriptions);\r\n                setSubscribers(fetchedSubscribers);\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch data:\", error);\r\n            } finally {\r\n                setIsLoading(false); // Désactiver le loader après le chargement\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []); // Charge les données au montage du composant\r\n\r\n    return (\r\n        <div className=\"subscriptions-page\">\r\n            <header className=\"subscriptions-header\">\r\n                <nav className=\"nav-menu\">\r\n                    <Link to=\"/\" className=\"nav-link\">\r\n                        Home\r\n                    </Link>\r\n                    <Link to=\"/subscriptions\" className=\"nav-link\">\r\n                        Subscriptions\r\n                    </Link>\r\n                    <Link to=\"/notifications\" className=\"nav-link\">\r\n                        Notifications\r\n                    </Link>\r\n                    <Link to=\"/settings\" className=\"nav-link\">\r\n                        Settings\r\n                    </Link>\r\n                </nav>\r\n                <div className=\"header-actions\">\r\n                    <button className=\"logout-button\" onClick={handleLogout}>\r\n                        Logout\r\n                    </button>\r\n                </div>\r\n            </header>\r\n            <main className=\"subscriptions-content\">\r\n                {isLoading ? (\r\n                    <div className=\"loader\">Loading data...</div> // Affiche un loader pendant le chargement\r\n                ) : (\r\n                    <>\r\n                        <div className=\"subscribers-section\">\r\n                            <h2>Your Subscribers</h2>\r\n                            <ul>\r\n                                {subscribers.length > 0 ? (\r\n                                    subscribers.map(({ id, username }) => (\r\n                                        <li key={id}>\r\n                                            <div className=\"list-icon\">{getInitial(username)}</div>\r\n                                            <span className=\"list-text\">{username}</span>\r\n                                        </li>\r\n                                    ))\r\n                                ) : (\r\n                                    <p>No subscribers yet.</p>\r\n                                )}\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"subscriptions-section\">\r\n                            <h2>Your Subscriptions</h2>\r\n                            <ul>\r\n                                {subscriptions.length > 0 ? (\r\n                                    subscriptions.map(({ id, username }) => (\r\n                                        <li key={id} className=\"subscription-item\">\r\n                                            <div className=\"list-icon\">{getInitial(username)}</div>\r\n                                            <span className=\"list-text\">{username}</span>\r\n                                            <button\r\n                                                className=\"unsubscribe-button\"\r\n                                                onClick={() => handleUnsubscribe(id)}\r\n                                            >\r\n                                                Unsubscribe\r\n                                            </button>\r\n                                        </li>\r\n                                    ))\r\n                                ) : (\r\n                                    <p>No subscriptions yet.</p>\r\n                                )}\r\n                            </ul>\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Subscriptions;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { getNotifications } from \"../hooks/Hooks\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport \"../assets/css/notifications.css\";\r\nimport Cookies from \"js-cookie\";\r\nimport { AuthContext } from \"../services/AuthContext\";\r\n\r\nfunction Notifications() {\r\n    document.title = \"Notifications - MetaMesh\";\r\n\r\n    const [notifications, setNotifications] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true); // Ajout de l'état de chargement\r\n    const navigate = useNavigate();\r\n    const { setIsAuthenticated } = useContext(AuthContext);\r\n\r\n    const handleLogout = () => {\r\n        Cookies.remove(\"authToken\");\r\n        Cookies.remove(\"userData\");\r\n        localStorage.removeItem(\"userId\");\r\n        setIsAuthenticated(false);\r\n        navigate(\"/login\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchNotifications = async () => {\r\n            const userId = localStorage.getItem(\"userId\");\r\n            if (!userId) {\r\n                console.error(\"User ID not found in localStorage. Redirecting to login.\");\r\n                navigate(\"/login\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const fetchedNotifications = await getNotifications(userId);\r\n                const notificationsWithFormattedDates = fetchedNotifications.map((notification) => ({\r\n                    ...notification,\r\n                    createdAt: new Date(notification.createdAt).toLocaleString(), // Convertir la date ISO en format lisible\r\n                }));\r\n                setNotifications(notificationsWithFormattedDates);\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch notifications:\", error);\r\n            } finally {\r\n                setIsLoading(false); // Désactiver le loader une fois le chargement terminé\r\n            }\r\n        };\r\n\r\n        fetchNotifications();\r\n    }, [navigate]);\r\n\r\n    return (\r\n        <div className=\"notifications-page\">\r\n            <header className=\"notifications-header\">\r\n                <nav className=\"nav-menu\">\r\n                    <Link to=\"/\" className=\"nav-link\">\r\n                        Home\r\n                    </Link>\r\n                    <Link to=\"/subscriptions\" className=\"nav-link\">\r\n                        Subscriptions\r\n                    </Link>\r\n                    <Link to=\"/notifications\" className=\"nav-link\">\r\n                        Notifications\r\n                    </Link>\r\n                    <Link to=\"/settings\" className=\"nav-link\">\r\n                        Settings\r\n                    </Link>\r\n                </nav>\r\n                <div className=\"header-actions\">\r\n                    <button className=\"logout-button\" onClick={handleLogout}>\r\n                        Logout\r\n                    </button>\r\n                </div>\r\n            </header>\r\n            <main className=\"notifications-content\">\r\n                {isLoading ? ( // Affiche le loader si les notifications sont en cours de chargement\r\n                    <div className=\"loader\">Loading notifications...</div>\r\n                ) : notifications.length > 0 ? (\r\n                    <ul>\r\n                        {notifications.map((notification, index) => (\r\n                            <li key={index} className=\"notification-item\">\r\n                                <span className=\"notification-date\">{notification.createdAt}</span>\r\n                                <span className=\"notification-message\">{notification.message}</span>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n                    <p>No notifications available.</p>\r\n                )}\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notifications;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { getUserData, setUserPrivacy } from \"../hooks/Hooks\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport \"../assets/css/settings.css\";\r\nimport { AuthContext } from \"../services/AuthContext\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nfunction Settings() {\r\n    document.title = \"Settings - MetaMesh\";\r\n\r\n    const [isPrivate, setIsPrivate] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [userId, setUserId] = useState(\"\");\r\n    const navigate = useNavigate();\r\n    const { setIsAuthenticated } = useContext(AuthContext);\r\n\r\n    const handleLogout = () => {\r\n        Cookies.remove(\"authToken\");\r\n        Cookies.remove(\"userData\");\r\n        localStorage.removeItem(\"userId\");\r\n        setIsAuthenticated(false);\r\n        navigate(\"/login\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setIsLoading(true);\r\n            try {\r\n                const data = await getUserData();\r\n                setUsername(data.username);\r\n                setEmail(data.email);\r\n                setUserId(data.id);\r\n                setIsPrivate(data.private);\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch data:\", error);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const handlePrivacyToggle = async (value) => {\r\n        try {\r\n            await setUserPrivacy(userId, value); // Passez l'userId et la valeur\r\n            setIsPrivate(value);\r\n        } catch (error) {\r\n            console.error(\"Failed to set account privacy:\", error);\r\n            alert(\"An error occurred while updating account privacy.\");\r\n        }\r\n    };\r\n\r\n    const getInitial = (name) => {\r\n        if (!name) return \"?\";\r\n        return name.charAt(0).toUpperCase();\r\n    };\r\n\r\n    if (isLoading) {\r\n        return <div className=\"loader\">Loading settings...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"settings-page\">\r\n            <header className=\"settings-header\">\r\n                <nav className=\"nav-menu\">\r\n                    <Link to=\"/\" className=\"nav-link\">\r\n                        Home\r\n                    </Link>\r\n                    <Link to=\"/subscriptions\" className=\"nav-link\">\r\n                        Subscriptions\r\n                    </Link>\r\n                    <Link to=\"/notifications\" className=\"nav-link\">\r\n                        Notifications\r\n                    </Link>\r\n                    <Link to=\"/settings\" className=\"nav-link\">\r\n                        Settings\r\n                    </Link>\r\n                </nav>\r\n                <div className=\"header-actions\">\r\n                    <button className=\"logout-button\" onClick={handleLogout}>\r\n                        Logout\r\n                    </button>\r\n                </div>\r\n            </header>\r\n            <main className=\"settings-content\">\r\n                {userId ? (\r\n                    <div className=\"profile-section settings-section\">\r\n                        <div className=\"profile-picture\">\r\n                            <div className=\"profile-initial\">{getInitial(username)}</div>\r\n                        </div>\r\n                        <div className=\"profile-info\">\r\n                            <h2>{username}</h2>\r\n                            <p>Email: {email}</p>\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <p>Failed to load user data.</p>\r\n                )}\r\n\r\n                <div className=\"privacy-settings settings-section\">\r\n                    <h2>Privacy Settings</h2>\r\n                    <p>\r\n                        A public account allows everyone to see your posts. A private account\r\n                        restricts access to your posts.\r\n                    </p>\r\n                    <div className=\"privacy-options\">\r\n                        <button\r\n                            className={`privacy-button ${!isPrivate ? \"active\" : \"\"}`}\r\n                            onClick={() => handlePrivacyToggle(false)}\r\n                        >\r\n                            Public\r\n                        </button>\r\n                        <button\r\n                            className={`privacy-button ${isPrivate ? \"active\" : \"\"}`}\r\n                            onClick={() => handlePrivacyToggle(true)}\r\n                        >\r\n                            Private\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport catImage from \"../assets/img/funny-cat.png\";\r\nimport \"../assets/css/error.css\";\r\n\r\nfunction Error() {\r\n    document.title = \"Not Found - MetaMesh\";\r\n    return (\r\n        <div className=\"error-container\">\r\n            <img src={catImage} alt=\"Funny Cat\" className=\"error-image\" />\r\n            <div className=\"error-text-container\">\r\n                <h1 className=\"error-title\">Are you lost?</h1>\r\n                <p className=\"error-message\">\r\n                    Go back to the <Link to=\"/\" className=\"error-link\">Home Page</Link>.\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error;\r\n","import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst PrivateRoute = ({ isAuthenticated, element: Component }) => {\r\n    const authToken = Cookies.get('authToken');\r\n    if (!authToken) {\r\n        return <Navigate to=\"/login\" replace />;\r\n    }\r\n    return isAuthenticated ? Component : <Navigate to=\"/login\" replace />;\r\n};\r\n\r\nexport default PrivateRoute;","import React from 'react';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nconst PublicRoute = ({ isAuthenticated, element: Component }) => {\r\n    return isAuthenticated ? <Navigate to=\"/\" replace /> : Component;\r\n}\r\nexport default PublicRoute;","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Cookies from 'js-cookie';\n\nimport Login from './pages/authentication/Login';\nimport Register from './pages/authentication/Register';\nimport Home from './pages/Home';\nimport Subscriptions from './pages/Subscriptions';\nimport Notifications from './pages/Notifications';\nimport Settings from './pages/Settings';\nimport Error from './pages/Error';\nimport { AuthContext } from './services/AuthContext';\nimport PrivateRoute from './services/PrivateRoute';\nimport PublicRoute from \"./services/PublicRoute\";\n\nexport default function App() {\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n    useEffect(() => {\n        const token = Cookies.get('authToken');\n        setIsAuthenticated(!!token);\n    }, []);\n\n    return (\n        <AuthContext.Provider value={{ isAuthenticated, setIsAuthenticated }}>\n            <BrowserRouter>\n                <Routes>\n                    <Route path=\"/login\" element={<PublicRoute isAuthenticated={isAuthenticated} element={<Login />} />} />\n                    <Route path=\"/register\" element={<PublicRoute isAuthenticated={isAuthenticated} element={<Register />} />} />\n\n                    <Route path=\"/\" element={<PrivateRoute isAuthenticated={isAuthenticated} element={<Home />} />} />\n                    <Route path=\"/subscriptions\" element={<PrivateRoute isAuthenticated={isAuthenticated} element={<Subscriptions />} />} />\n                    <Route path=\"/notifications\" element={<PrivateRoute isAuthenticated={isAuthenticated} element={<Notifications />} />} />\n                    <Route path=\"/settings\" element={<PrivateRoute isAuthenticated={isAuthenticated} element={<Settings />} />} />\n\n                    <Route exact path=\"*\" element={<div className=\"Main\"><Error /></div>}/>\n                </Routes>\n            </BrowserRouter>\n        </AuthContext.Provider>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n);"],"sourceRoot":""}